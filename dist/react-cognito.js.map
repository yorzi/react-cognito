{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 96df1d36c233da968cf6","webpack:///./src/index.js","webpack:///./src/reducers.js","webpack:///external {\"root\":\"AmazonCognitoIdentity\",\"commonjs2\":\"amazon-cognito-identity-js\",\"commonjs\":\"amazon-cognito-identity-js\",\"amd\":\"amazon-cognito-identity-js\"}","webpack:///./src/states.js","webpack:///./src/actions.js","webpack:///./src/utils.js","webpack:///./src/guard.js","webpack:///./src/auth.js","webpack:///external {\"root\":\"AWS\",\"commonjs\":\"aws-sdk\",\"commonjs2\":\"aws-sdk\",\"amd\":\"aws-sdk\"}","webpack:///./src/attributes.js","webpack:///./src/policy.js","webpack:///./src/Login.jsx","webpack:///external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack:///external {\"root\":\"ReactRedux\",\"commonjs\":\"react-redux\",\"commonjs2\":\"react-redux\",\"amd\":\"react-redux\"}","webpack:///./src/Logout.jsx","webpack:///./src/NewPasswordRequired.jsx","webpack:///./src/EmailVerification.jsx","webpack:///./src/PasswordReset.jsx","webpack:///./src/Confirm.jsx"],"names":["initial","user","cache","userName","email","state","LOGGED_OUT","error","userPool","attributes","creds","config","region","clientId","identityPool","configure","action","AWS","pool","UserPoolId","ClientId","getCurrentUser","Object","assign","addAttributes","s","s2","cognito","type","AUTHENTICATED","LOGGING_IN","LOGGED_IN","username","MFA_REQUIRED","NEW_PASSWORD_REQUIRED","CONFIRMATION_REQUIRED","EMAIL_VERIFICATION_REQUIRED","CognitoState","Action","authenticated","loggingIn","login","logout","partialLogout","loginFailure","mfaRequired","newPasswordRequired","newPasswordRequiredFailure","emailVerificationRequired","emailVerificationFailed","beginPasswordResetFlow","continuePasswordResetFlow","finishPasswordResetFlow","updateAttributes","confirmationRequired","confirmFailed","clearCache","changePassword","oldPassword","newPassword","Promise","resolve","reject","err","result","message","buildLogins","jwtToken","loginDomain","loginUrl","IdentityPoolId","Logins","LoginId","testLoggedIn","wantLoggedIn","isLoggedIn","permitted","expr","loggedIn","undefined","guard","store","forbiddenUrl","routeState","replace","callback","getState","dest","then","allow","createGuard","emailVerificationFlow","required","refreshIdentityCredentials","logins","refresh","performLogin","getSession","session","getIdToken","getJwtToken","getUsername","authenticate","password","dispatch","Username","Password","Pool","authenticateUser","onSuccess","onFailure","code","registerUser","signUp","userConfirmed","sendAttributeVerificationCode","attribute","getAttributeVerificationCode","inputVerificationCode","getUserAttributes","i","length","name","getName","value","getValue","mkAttrList","keys","map","Name","key","Value","attributeList","enable","f","subscribe","email_verified","fetchAttributes","direct","identityPoolLogin","setupCognito","BaseLogin","cloneElement","props","children","onSubmit","mapStateToProps","mapDispatchToProps","authenticator","mergeProps","stateProps","dispatchProps","ownProps","Login","Logout","onClick","event","context","signOut","preventDefault","onLogout","Component","contextTypes","object","propTypes","PropTypes","any","isRequired","func","defaultProps","BaseNewPasswordRequired","setNewPassword","userAttributes","completeNewPasswordChallenge","setNewPasswordPartial","NewPasswordRequired","BaseEmailVerification","onCancel","verifyEmail","verificationCode","verifyAttribute","verifyPartial","EmailVerification","BasePasswordReset","sendVerificationCode","setPassword","getUser","confirmPassword","forgotPassword","sendVerificationCodePartial","setPasswordPartial","PasswordReset","BaseConfirm","onResend","confirm","confirmRegistration","resend","resendConfirmationCode","confirmPartial","onResendPartial","Confirm"],"mappings":"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","file":"react-cognito.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"amazon-cognito-identity-js\"), require(\"aws-sdk\"), require(\"react\"), require(\"react-redux\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"amazon-cognito-identity-js\", \"aws-sdk\", \"react\", \"react-redux\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactCognito\"] = factory(require(\"amazon-cognito-identity-js\"), require(\"aws-sdk\"), require(\"react\"), require(\"react-redux\"));\n\telse\n\t\troot[\"ReactCognito\"] = factory(root[\"AmazonCognitoIdentity\"], root[\"AWS\"], root[\"React\"], root[\"ReactRedux\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 96df1d36c233da968cf6","export * from './reducers';\nexport * from './actions';\nexport * from './states';\nexport * from './utils';\nexport * from './guard';\nexport * from './auth';\nexport * from './attributes';\nexport * from './policy';\n\n\nexport * from './Login.jsx';\nexport * from './Logout.jsx';\nexport * from './NewPasswordRequired.jsx';\nexport * from './EmailVerification.jsx';\nexport * from './PasswordReset.jsx';\nexport * from './Confirm.jsx';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import { CognitoUserPool } from 'amazon-cognito-identity-js';\nimport { CognitoState } from './states';\n\n/* global AWS */\n\nconst initial = {\n  user: null,\n  cache: { // cached for post register login\n    userName: null,\n    email: null,\n  },\n  state: CognitoState.LOGGED_OUT,\n  error: '',\n  userPool: null,\n  attributes: {},\n  creds: null,\n  config: {\n    region: null,\n    userPool: null,\n    clientId: null,\n    identityPool: null,\n  },\n};\n\nconst configure = (state, action) => {\n  // surprise side-effect!\n  AWS.config.region = action.config.region;\n  const pool = new CognitoUserPool({\n    UserPoolId: action.config.userPool,\n    ClientId: action.config.clientId,\n  });\n  const user = pool.getCurrentUser();\n  return Object.assign({}, state, {\n    config: action.config,\n    userPool: pool,\n    user,\n  });\n};\n\n// sometimes we don't get the attributes in later parts of the login flow\n// but lets not clobber the ones we've got if we've not got them\nconst addAttributes = (s, attributes) => {\n  const s2 = Object.assign({}, s);\n  if (attributes) {\n    s2.attributes = attributes;\n  }\n  return s2;\n};\n\n/**\n * reducer function to be passed to redux combineReducers\n * @param {object} state\n * @param {object} action\n*/\n\nexport const cognito = (state = initial, action) => {\n  switch (action.type) {\n\n    case 'COGNITO_CONFIGURE':\n      return configure(state, action);\n\n    case 'COGNITO_AUTHENTICATED':\n      return Object.assign({}, state, {\n        user: action.user,\n        cache: {\n          userName: null,\n          email: null,\n        },\n        error: '',\n        state: CognitoState.AUTHENTICATED,\n      });\n\n    case 'COGNITO_CLEAR_CACHE':\n      return Object.assign({}, state, {\n        cache: {\n          userName: null,\n          email: null,\n        },\n      });\n\n    case 'COGNITO_LOGGING_IN':\n      return Object.assign({}, state, {\n        state: CognitoState.LOGGING_IN,\n        attributes: action.attributes,\n      });\n\n    case 'COGNITO_LOGIN':\n      return Object.assign({}, state, addAttributes({\n        error: '',\n        creds: action.creds,\n        state: CognitoState.LOGGED_IN,\n      }, action.attributes));\n\n    case 'COGNITO_LOGOUT':\n      return Object.assign({}, state, {\n        user: null,\n        error: '',\n        creds: null,\n        state: CognitoState.LOGGED_OUT,\n      });\n\n    case 'COGNITO_PARTIAL_LOGOUT':\n      return Object.assign({}, state, {\n        user: null,\n        userName: state.user.username,\n        error: '',\n        creds: null,\n        state: CognitoState.LOGGED_OUT,\n      });\n\n    case 'COGNITO_LOGIN_FAILURE':\n      return Object.assign({}, state, {\n        user: action.user,\n        state: CognitoState.LOGGED_OUT,\n        error: action.error,\n      });\n\n    case 'COGNITO_LOGIN_MFA_REQUIRED':\n      return Object.assign({}, state, {\n        user: action.user,\n        error: '',\n        state: CognitoState.MFA_REQUIRED,\n      });\n\n    case 'COGNITO_LOGIN_NEW_PASSWORD_REQUIRED':\n      return Object.assign({}, state, {\n        user: action.user,\n        error: '',\n        state: CognitoState.NEW_PASSWORD_REQUIRED,\n      });\n\n    case 'COGNITO_USER_UNCONFIRMED':\n      return Object.assign({}, state, {\n        user: action.user,\n        state: CognitoState.CONFIRMATION_REQUIRED,\n        cache: {\n          userName: action.user.username,\n          email: action.email\n        },\n      });\n\n    case 'COGNITO_USER_CONFIRM_FAILED':\n      return Object.assign({}, state, {\n        user: action.user,\n        state: CognitoState.CONFIRMATION_REQUIRED,\n        error: action.error,\n      });\n\n    case 'COGNITO_NEW_PASSWORD_REQUIRED_FAILURE':\n      return Object.assign({}, state, {\n        error: action.error,\n        state: CognitoState.NEW_PASSWORD_REQUIRED,\n      });\n\n    case 'COGNITO_EMAIL_VERIFICATION_REQUIRED':\n      return Object.assign({}, state, addAttributes({\n        error: '',\n        state: CognitoState.EMAIL_VERIFICATION_REQUIRED,\n      }, action.attributes));\n\n    case 'COGNITO_EMAIL_VERIFICATION_FAILED':\n      return Object.assign({}, state, addAttributes({\n        error: action.error,\n        state: CognitoState.EMAIL_VERIFICATION_REQUIRED,\n      }, action.attributes));\n\n    case 'COGNITO_BEGIN_PASSWORD_RESET_FLOW':\n      return Object.assign({}, state, {\n        error: action.error,\n      });\n\n    case 'COGNITO_CONTINUE_PASSWORD_RESET_FLOW':\n      return state;\n\n    case 'COGNITO_FINISH_PASSWORD_RESET_FLOW':\n      return state;\n\n    // this moves us into the AUTHENTICATED state, potentially causing\n    // a number of side-effects. this is so we can re-verify the email\n    // address if we have to\n    case 'COGNITO_UPDATE_USER_ATTRIBUTES':\n      return Object.assign({}, state, {\n        attributes: Object.assign({}, state.attributes, action.attributes),\n        state: CognitoState.AUTHENTICATED,\n      });\n\n    default:\n      return state;\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/reducers.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"AmazonCognitoIdentity\",\"commonjs2\":\"amazon-cognito-identity-js\",\"commonjs\":\"amazon-cognito-identity-js\",\"amd\":\"amazon-cognito-identity-js\"}\n// module id = 2\n// module chunks = 0","\n/** states stored in store.cognito.state */\nexport const CognitoState = {\n  LOGGED_OUT: 'LOGGED_OUT',\n  AUTHENTICATED: 'AUTHENTICATED',\n  LOGGING_IN: 'LOGGING_IN',\n  LOGGED_IN: 'LOGGED_IN',\n  NEW_PASSWORD_REQUIRED: 'NEW_PASSWORD_REQUIRED',\n  MFA_REQUIRED: 'MFA_REQUIRED',\n  EMAIL_VERIFICATION_REQUIRED: 'EMAIL_VERIFICATION_REQUIRED',\n  CONFIRMATION_REQUIRED: 'CONFIRMATION_REQUIRED',\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/states.js","/**\n * container for all the actions\n*/\nconst Action = {\n\n  configure: config => ({\n    type: 'COGNITO_CONFIGURE',\n    config,\n  }),\n\n  authenticated: user => ({\n    type: 'COGNITO_AUTHENTICATED',\n    user,\n  }),\n\n  loggingIn: attributes => ({\n    type: 'COGNITO_LOGGING_IN',\n    attributes,\n  }),\n\n  login: creds => ({\n    type: 'COGNITO_LOGIN',\n    creds,\n  }),\n\n  logout: () => ({\n    type: 'COGNITO_LOGOUT',\n  }),\n\n  partialLogout: () => ({\n    type: 'COGNITO_PARTIAL_LOGOUT',\n  }),\n\n  loginFailure: (user, error) => ({\n    type: 'COGNITO_LOGIN_FAILURE',\n    user,\n    error,\n  }),\n\n  mfaRequired: user => ({\n    type: 'COGNITO_LOGIN_MFA_REQUIRED',\n    user,\n  }),\n\n  newPasswordRequired: user => ({\n    type: 'COGNITO_LOGIN_NEW_PASSWORD_REQUIRED',\n    user,\n  }),\n\n  newPasswordRequiredFailure: (user, error) => ({\n    type: 'COGNITO_NEW_PASSWORD_REQUIRED_FAILURE',\n    user,\n    error,\n  }),\n\n  emailVerificationRequired: attributes => ({\n    type: 'COGNITO_EMAIL_VERIFICATION_REQUIRED',\n    attributes,\n  }),\n\n  emailVerificationFailed: (user, error) => ({\n    type: 'COGNITO_EMAIL_VERIFICATION_FAILED',\n    user,\n    error,\n  }),\n\n  beginPasswordResetFlow: (user, error) => ({\n    type: 'COGNITO_BEGIN_PASSWORD_RESET_FLOW',\n    user,\n    error,\n  }),\n\n  continuePasswordResetFlow: user => ({\n    type: 'COGNITO_CONTINUE_PASSWORD_RESET_FLOW',\n    user,\n  }),\n\n  finishPasswordResetFlow: error => ({\n    type: 'COGNITO_FINISH_PASSWORD_RESET_FLOW',\n    error,\n  }),\n\n  updateAttributes: attributes => ({\n    type: 'COGNITO_UPDATE_USER_ATTRIBUTES',\n    attributes,\n  }),\n\n  confirmationRequired: (user, email) => ({\n    type: 'COGNITO_USER_UNCONFIRMED',\n    user,\n    email,\n  }),\n\n  confirmFailed: (user, error) => ({\n    type: 'COGNITO_USER_CONFIRM_FAILED',\n    user,\n    error,\n  }),\n\n  clearCache: () => ({\n    type: 'COGNITO_CLEAR_CACHE',\n  }),\n};\n\nexport { Action };\n\n\n\n// WEBPACK FOOTER //\n// ./src/actions.js","\n/**\n * Change a user's password\n * @param {object} user - the cognito user object\n * @param {string} oldPassword - the current password\n * @param {string} newPassword - the new password\n*/\nconst changePassword = (user, oldPassword, newPassword) =>\n  new Promise((resolve, reject) =>\n    user.changePassword(oldPassword, newPassword, (err, result) => {\n      if (err) {\n        reject(err.message);\n      } else {\n        resolve(result);\n      }\n    }));\n\n/**\n * builds the federated identity pool login structure\n * @param {string} username - the username of the user\n * @param {string} jwtToken - a JWT Token from the session\n * @param {object} config - the cognito react config object\n*/\nconst buildLogins = (username, jwtToken, config) => {\n  const loginDomain = `cognito-idp.${config.region}.amazonaws.com`;\n  const loginUrl = `${loginDomain}/${config.userPool}`;\n  const creds = {\n    IdentityPoolId: config.identityPool,\n    Logins: {},\n    LoginId: username, // https://github.com/aws/aws-sdk-js/issues/609\n  };\n  creds.Logins[loginUrl] = jwtToken;\n  return creds;\n};\n\nexport {\n  changePassword,\n  buildLogins,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js","\n/*\n Default behaviour is to restrict access to only logged in users\n*/\n\nconst testLoggedIn = (state, wantLoggedIn) => {\n  const isLoggedIn = state.cognito.user !== null;\n  if (isLoggedIn && wantLoggedIn) {\n    return true;\n  }\n  if (!isLoggedIn && !wantLoggedIn) {\n    return true;\n  }\n  return false;\n};\n\nconst permitted = (state, expr) =>\n  new Promise((resolve) => {\n    if (expr.loggedIn !== undefined) {\n      resolve(testLoggedIn(state, expr.loggedIn));\n    } else {\n      resolve(testLoggedIn(state, true));\n    }\n  });\n\nconst guard = (store, forbiddenUrl, expr = {}, routeState, replace, callback) => {\n  const state = store.getState();\n  let dest = forbiddenUrl;\n\n  if (expr.forbiddenUrl !== undefined) {\n    dest = expr.forbiddenUrl;\n  }\n  permitted(state, expr).then((allow) => {\n    if (!allow) {\n      replace(dest);\n    }\n    callback();\n  });\n};\n\n/**\n * creates a guard function you can use in <Route> tags\n * @param {object} store - the redux store\n * @param {string} forbiddenUrl - the default url to navigate to if forbidden\n * @returns {function} - a function that can be provided to onEnter\n*/\nconst createGuard = (store, forbiddenUrl) => expr => (state, replace, callback) =>\n  guard(store, forbiddenUrl, expr, state, replace, callback);\n\n\nexport { createGuard };\n\n\n\n// WEBPACK FOOTER //\n// ./src/guard.js","import { CognitoUser, AuthenticationDetails } from 'amazon-cognito-identity-js';\nimport { CognitoIdentityCredentials } from 'aws-sdk';\nimport { Action } from './actions';\nimport { mkAttrList, sendAttributeVerificationCode } from './attributes';\nimport { buildLogins } from './utils';\n\n/**\n * sends the email verification code and transitions to the correct state\n * @param {object} user - the CognitoUser object\n * @param {object} attributes - the attributes dictionary\n * @return {Promise<object>} a promise that resolves to a redux action\n*/\nconst emailVerificationFlow = (user, attributes) =>\n  new Promise(resolve =>\n    sendAttributeVerificationCode(user, 'email').then((required) => {\n      if (required) {\n        resolve(Action.emailVerificationRequired(attributes));\n      } else {\n        // dead end?\n        resolve(Action.loggingIn(attributes));\n      }\n    }, (error) => {\n      // some odd classes of error here\n      resolve(Action.emailVerificationFailed(error, attributes));\n    }));\n\n/**\n * logs in to the federated identity pool with a JWT\n * @param {string} username - the username\n * @param {string} jwtToken - a token from the session\n * @param {object} config - the react-cognito config\n * @return {Promise<object>} a promise that resolves to the federated identity credentials\n*/\nconst refreshIdentityCredentials = (username, jwtToken, config) =>\n  new Promise((resolve, reject) => {\n    const logins = buildLogins(username, jwtToken, config);\n    const creds = new CognitoIdentityCredentials(logins);\n    creds.refresh((error) => {\n      if (error) {\n        reject(error.message);\n      } else {\n        resolve(creds);\n      }\n    });\n  });\n\n/**\n * establishes a session with the user pool, and logs into the federated identity\n * pool using a token from the session\n * @param {object} user - the CognitoUser object\n * @param {object} config -the react-cognito config\n * @return {Promise<object>} an action to be dispatched\n*/\nconst performLogin = (user, config) =>\n  new Promise((resolve, reject) => {\n    if (user != null) {\n      user.getSession((err, session) => {\n        if (err) {\n          resolve(Action.loginFailure(user, err.message));\n        } else {\n          const jwtToken = session.getIdToken().getJwtToken();\n          const username = user.getUsername();\n          refreshIdentityCredentials(username, jwtToken, config).then(\n            creds => resolve(Action.login(creds)),\n            message => resolve(Action.loginFailure(user, message)));\n        }\n      });\n    } else {\n      reject('user is null');\n    }\n  });\n\n/**\n *\n * Authenticates with a user pool, and handles responses.\n * if the authentication is successful it then logs in to the\n * identity pool.\n *\n * returns an action depending on the outcome.  Possible actions returned\n * are:\n *\n * - login - valid user who is logged in\n * - loginFailure - failed to authenticate with user pool or identity pool\n * - mfaRequired - user now needs to enter MFA\n * - newPasswordRequired - user must change password on first login\n * - emailVerificationRequired - user must verify their email address\n * - emailVerificationFailed - email verification is required, but won't work\n *\n * Dispatch the resulting action, e.g.:\n *\n * ```\n * const { userPool, config } = state.cognito;\n * authenticate(username, password, userPool, config).then(dispatch);\n * ```\n *\n * @param {string} username - the username provided by the user\n * @param {string} password - the password provided by the user\n * @param {object} userPool - a Cognito User Pool object\n * @return {Promise<object>} - a promise that resolves an action to be dispatched\n *\n*/\nconst authenticate = (username, password, userPool, config, dispatch) =>\n  new Promise((resolve, reject) => {\n    const creds = new AuthenticationDetails({\n      Username: username,\n      Password: password,\n    });\n\n    const user = new CognitoUser({\n      Username: username,\n      Pool: userPool,\n    });\n\n    user.authenticateUser(creds, {\n      onSuccess: () => {\n        dispatch(Action.authenticated(user));\n        resolve();\n      },\n      onFailure: (error) => {\n        if (error.code === 'UserNotConfirmedException') {\n          dispatch(Action.confirmationRequired(user));\n          resolve();\n        } else {\n          dispatch(Action.loginFailure(user, error.message));\n          reject(error);\n        }\n      },\n      mfaRequired: () => {\n        dispatch(Action.mfaRequired(user));\n        resolve();\n      },\n      newPasswordRequired: () => {\n        dispatch(Action.newPasswordRequired(user));\n        resolve();\n      },\n    });\n  });\n\n/**\n * sign up this user with the user pool provided\n * @param {object} userPool - a Cognito userpool (e.g. state.cognito.userPool)\n * @param {object} config - the react-cognito config object\n * @param {string} username - the username\n * @param {string} password - the password\n * @param {object} attributes - an attributes dictionary\n * @return {Promise<object>} a promise that resolves a redux action\n*/\nconst registerUser = (userPool, config, username, password, attributes) =>\n  new Promise((resolve, reject) =>\n    userPool.signUp(username, password, mkAttrList(attributes), null, (err, result) => {\n      if (err) {\n        reject(err.message);\n      } else if (result.userConfirmed === false) {\n        resolve(Action.confirmationRequired(result.user, attributes.email));\n      } else {\n        resolve(authenticate(username, password, userPool));\n      }\n    }));\n\n\nexport {\n  authenticate,\n  performLogin,\n  registerUser,\n  emailVerificationFlow,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/auth.js","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"AWS\",\"commonjs\":\"aws-sdk\",\"commonjs2\":\"aws-sdk\",\"amd\":\"aws-sdk\"}\n// module id = 8\n// module chunks = 0","\nimport { Action } from './actions';\n\n/**\n * Request that a verification code is sent by email or SMS to verify\n * an attribute\n * @param {object} user - the cognito user object\n * @param {string} attribute - the attribute name\n*/\nconst sendAttributeVerificationCode = (user, attribute) =>\n  new Promise((resolve, reject) => {\n    user.getAttributeVerificationCode(attribute, {\n      onSuccess: () => resolve(false),\n      inputVerificationCode: () => resolve(true),\n      onFailure: error => reject(error.message),\n    });\n  });\n\n/**\n * Fetches the user attributes from Cognito, and turns them into\n * an object\n * @param {object} user - the cognito user object\n * @returns {Promise} resolves with the attributes or rejects with an error message\n*/\nconst getUserAttributes = user =>\n  new Promise((resolve, reject) =>\n    user.getUserAttributes((error, result) => {\n      if (error) {\n        reject(error.message);\n      } else {\n        const attributes = {};\n        for (let i = 0; i < result.length; i += 1) {\n          const name = result[i].getName();\n          const value = result[i].getValue();\n          attributes[name] = value;\n        }\n        resolve(attributes);\n      }\n    }),\n  );\n\n/**\n * convert an attribute dictionary to an attribute list\n * @param {object} attributes - a dictionary of attributes\n * @return {array} AWS expected attribute list\n*/\nconst mkAttrList = attributes =>\n  Object.keys(attributes).map(key => ({\n    Name: key,\n    Value: attributes[key],\n  }));\n\n/**\n * update the attributes in Cognito\n * @param {object} user - the CognitoUser object\n * @param {object} attributes - an attributes dictionary with the attributes to be updated\n * @return {Promise<object>} a promise that resolves to a redux action\n*/\nconst updateAttributes = (user, attributes) =>\n  new Promise((resolve, reject) => {\n    const attributeList = mkAttrList(attributes);\n    user.updateAttributes(attributeList, (err) => {\n      if (err) {\n        reject(err.message);\n      } else {\n        resolve(Action.updateAttributes(attributes));\n      }\n    });\n  });\n\nexport {\n  sendAttributeVerificationCode,\n  getUserAttributes,\n  updateAttributes,\n  mkAttrList,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/attributes.js","import { Action } from './actions';\nimport { getUserAttributes } from './attributes';\nimport { emailVerificationFlow, performLogin } from './auth';\nimport { CognitoState } from './states';\n\n/**\n * subscribes a \"policy\" function to the store, and calls it\n * with the state and the dispatch function\n * @param {object} store - the redux store\n * @param {function} f - f(state, dispatch)\n*/\nconst enable = (store, f) => {\n  store.subscribe(() => {\n    const state = store.getState();\n    const dispatch = store.dispatch;\n    f(state, dispatch);\n  });\n};\n\n/**\n * requires email verification before transitioning from AUTHENTICATED\n * @param {object} state - the redux store state\n * @param {function} dispatch - the dispatch function\n*/\nconst emailVerificationRequired = (state, dispatch) => {\n  if (state.cognito.state === CognitoState.AUTHENTICATED) {\n    const user = state.cognito.user;\n    getUserAttributes(user).then((attributes) => {\n      if (attributes.email_verified !== 'true') {\n        emailVerificationFlow(user, attributes).then(dispatch);\n      } else {\n        dispatch(Action.loggingIn(attributes));\n      }\n    });\n  }\n};\n\n/**\n * fetches and stores attributes before transitioning from AUTHENTICATED\n * @param {object} state - the redux store state\n * @param {function} dispatch - the dispatch function\n*/\nconst fetchAttributes = (state, dispatch) => {\n  if (state.cognito.state === CognitoState.AUTHENTICATED) {\n    const user = state.cognito.user;\n    getUserAttributes(user).then((attributes) => {\n      dispatch(Action.loggingIn(attributes));\n    });\n  }\n};\n\n/**\n * transitions directly from AUTHENTICATED to LOGGING_IN\n * @param {object} state - the redux store state\n * @param {function} dispatch - the dispatch function\n*/\nconst direct = (state, dispatch) => {\n  if (state.cognito.state === CognitoState.AUTHENTICATED) {\n    dispatch(Action.loggingIn());\n  }\n};\n\n/**\n * logs into the single federated identity pool to transition from LOGGING_IN\n * to LOGGED_IN\n * @param {object} state - the redux store state\n * @param {function} dispatch - the dispatch function\n*/\nconst identityPoolLogin = (state, dispatch) => {\n  if (state.cognito.state === CognitoState.LOGGING_IN) {\n    performLogin(state.cognito.user, state.cognito.config).then(dispatch);\n  }\n};\n\n/**\n * sets up react-cognito with default policies.\n*/\nconst setupCognito = (store, config) => {\n  store.dispatch(Action.configure(config));\n  enable(store, emailVerificationRequired);\n  enable(store, identityPoolLogin);\n};\n\nexport {\n  setupCognito,\n  enable,\n  direct,\n  fetchAttributes,\n  emailVerificationRequired,\n  identityPoolLogin,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/policy.js","import React from 'react';\nimport { connect } from 'react-redux';\nimport { authenticate } from './auth';\nimport { Action } from './actions';\n\nconst BaseLogin = props =>\n  React.cloneElement(props.children, {\n    username: props.username,\n    email: props.email,\n    onSubmit: props.onSubmit,\n    clearCache: props.clearCache,\n  });\n\nconst mapStateToProps = (state) => {\n  let username = '';\n  if (state.cognito.user) {\n    username = state.cognito.user.getUsername();\n  } else if (state.cognito.userName) {\n    username = state.cognito.cache.userName;\n  }\n  return {\n    username,\n    email: state.cognito.cache.email,\n    config: state.cognito.config,\n    userPool: state.cognito.userPool,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  authenticator: (username, password, userPool, config) =>\n    authenticate(username, password, userPool, config, dispatch),\n  clearCache: () => dispatch(Action.clearCache()),\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) =>\n  Object.assign({}, ownProps, stateProps, {\n    onSubmit: (username, password) =>\n      dispatchProps.authenticator(username, password, stateProps.userPool, stateProps.config),\n    clearCache: dispatchProps.clearCache,\n  });\n\n/**\n * Container for login behaviour, wrapping a login form.\n *\n * Magically provides the following props to the wrapped form:\n *\n *  * username\n *  * onSubmit\n *\n * @example\n * <Login>\n *   <LoginForm />\n * </Login>\n */\nconst Login = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n)(BaseLogin);\n\nexport { Login };\n\n\n\n// WEBPACK FOOTER //\n// ./src/Login.jsx","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}\n// module id = 12\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"ReactRedux\",\"commonjs\":\"react-redux\",\"commonjs2\":\"react-redux\",\"amd\":\"react-redux\"}\n// module id = 13\n// module chunks = 0","import React, { PropTypes } from 'react';\nimport { Action } from './actions';\n\n/**\n * Container for logout behaviour.\n * @example\n * <Logout onLogout={handler}>\n *   <LogoutForm />\n * </Logout>\n */\nexport class Logout extends React.Component {\n\n  /**\n   * Passed to child element as onClick prop.\n   * Signs the user out, and then dispatches the logout action\n   * If you want to take further actions (like reloading UI) then add an\n   * onLogout property to the Logout element\n   */\n  onClick = (event) => {\n    const { store } = this.context;\n    const state = store.getState();\n    state.cognito.user.signOut();\n    event.preventDefault();\n    store.dispatch(Action.logout());\n    this.props.onLogout();\n  }\n\n  /**\n   * renders the child element, adding an onClick property\n   */\n  render() {\n    return React.cloneElement(this.props.children, {\n      onClick: this.onClick,\n    });\n  }\n}\nLogout.contextTypes = {\n  store: PropTypes.object,\n};\nLogout.propTypes = {\n  children: React.PropTypes.any.isRequired,\n  onLogout: React.PropTypes.func,\n};\nLogout.defaultProps = {\n  onLogout: () => {},\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/Logout.jsx","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Action } from './actions';\n\nconst BaseNewPasswordRequired = props =>\n  React.cloneElement(props.children, {\n    error: props.error,\n    onSubmit: props.onSubmit,\n  });\n\nconst setNewPassword = (password, user, config, userAttributes, dispatch) =>\n  user.completeNewPasswordChallenge(password, userAttributes, {\n    onSuccess: () => dispatch(Action.authenticated(user)),\n    onFailure: error => dispatch(Action.newPasswordRequiredFailure(user, error.message)),\n    mfaRequired: () => dispatch(Action.mfaRequired(user)),\n    newPasswordRequired: () => dispatch(Action.newPasswordRequired(user)),\n  });\n\nconst mapStateToProps = state => ({\n  error: state.cognito.error,\n  user: state.cognito.user,\n  config: state.cognito.config,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setNewPasswordPartial: (password, user, config, userAttributes) =>\n    setNewPassword(password, user, config, userAttributes, dispatch),\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) =>\n  Object.assign({}, ownProps, stateProps, {\n    onSubmit: (password, userAttributes) =>\n     dispatchProps.setNewPasswordPartial(\n      password,\n      stateProps.user,\n      stateProps.config,\n      userAttributes),\n  });\n\n/**\n * Wrapper for a New Password Required form\n *\n * Magically provides the following props to the wrapped element:\n *\n * * user - the Cognito user\n * * error - the persistent react-cognito error message\n * * onSubmit - a handler that calls the Set New Password API\n *\n * @example\n *\n * <NewPasswordRequired>\n *   <NewPasswordRequiredForm />\n * </NewPasswordRequired>\n */\nexport const NewPasswordRequired = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n)(BaseNewPasswordRequired);\n\n\n\n// WEBPACK FOOTER //\n// ./src/NewPasswordRequired.jsx","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Action } from './actions';\n\nconst BaseEmailVerification = props =>\n  React.cloneElement(props.children, {\n    error: props.error,\n    onSubmit: props.onSubmit,\n    onCancel: props.onCancel,\n  });\n\nexport const verifyEmail = (verificationCode, user, dispatch) =>\n  new Promise((resolve, reject) => {\n    user.verifyAttribute('email', verificationCode, {\n      onSuccess: () => {\n        dispatch(Action.login(user));\n        resolve();\n      },\n      inputVerificationCode: () => {\n        dispatch(Action.emailVerificationRequired(user));\n        reject();\n      },\n      onFailure: (error) => {\n        dispatch(Action.emailVerificationFailed(user, error.message));\n        reject();\n      },\n    });\n  });\n\nconst mapStateToProps = state => ({\n  error: state.cognito.error,\n  user: state.cognito.user,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  verifyPartial: (verificationCode, user) =>\n    verifyEmail(verificationCode, user, dispatch),\n  onCancel: () => dispatch(Action.logout()),\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) =>\n  Object.assign({}, ownProps, stateProps, dispatchProps, {\n    onSubmit: verificationCode =>\n     dispatchProps.verifyPartial(verificationCode, stateProps.user),\n  });\n\n/**\n * Wrapper for an Email Verification Form.\n * Magically adds the following props to the contained form:\n *\n *  * user - the Cognito user from the Redux store\n *  * error - the persisted error from the Redux store\n *  * onSubmit - a handler that calls the Cognito verification API\n *\n * @example\n * <EmailVerification>\n *   <EmailVerificationForm />\n * </EmailVerification>\n *\n */\nexport const EmailVerification = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n)(BaseEmailVerification);\n\n\n\n// WEBPACK FOOTER //\n// ./src/EmailVerification.jsx","import React from 'react';\nimport { connect } from 'react-redux';\nimport { CognitoUser } from 'amazon-cognito-identity-js';\nimport { Action } from './actions';\n\nconst BasePasswordReset = props =>\n  React.cloneElement(props.children, {\n    username: props.username,\n    sendVerificationCode: props.sendVerificationCode,\n    setPassword: props.setPassword,\n  });\n\nconst getUser = (username, userPool) => {\n  const user = new CognitoUser({\n    Username: username,\n    Pool: userPool,\n  });\n  return user;\n};\n\nconst setPassword = (username, userPool, code, password, dispatch) =>\n  new Promise((resolve, reject) => {\n    const user = getUser(username, userPool);\n    user.confirmPassword(code, password, {\n      onSuccess: () => {\n        dispatch(Action.finishPasswordResetFlow()),\n        resolve();\n      },\n      onFailure: err => {\n        dispatch(Action.beginPasswordResetFlow(user, err.message)),\n        reject(err);\n      }\n    });\n  });\n\n\nconst sendVerificationCode = (username, userPool, dispatch) =>\n  new Promise((resolve, reject) => {\n    const user = getUser(username, userPool);\n    user.forgotPassword({\n      onSuccess: () => {\n        dispatch(Action.continuePasswordResetFlow(user));\n        resolve();\n      },\n      onFailure: err => {\n        dispatch(Action.beginPasswordResetFlow(user, err.message));\n        reject(err);\n      }\n    });\n  });\n\n\nconst mapStateToProps = (state) => {\n  const props = {\n    user: state.cognito.user,\n    username: '',\n    userPool: state.cognito.userPool,\n  };\n  if (state.cognito.user != null) {\n    props.username = state.cognito.user.getUsername();\n  }\n  return props;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  sendVerificationCodePartial: (username, userPool) =>\n    sendVerificationCode(username, userPool, dispatch),\n  setPasswordPartial: (user, userPool, code, password) =>\n    setPassword(user, userPool, code, password, dispatch),\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) =>\n  Object.assign({}, ownProps, stateProps, {\n    sendVerificationCode: username =>\n      dispatchProps.sendVerificationCodePartial(username, stateProps.userPool),\n    setPassword: (username, code, password) =>\n      dispatchProps.setPasswordPartial(username, stateProps.userPool, code, password),\n  });\n\n/**\n * Container for a Password Reset form\n *\n * Magically provides the following props to the wrapped element:\n *\n *  * user\n *  * username\n *  * sendVerificationCode\n *  * setPassword\n *\n * @example\n * <PasswordReset>\n *   <PasswordResetForm />\n * </PasswordReset>\n */\nexport const PasswordReset = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n)(BasePasswordReset);\n\n\n\n// WEBPACK FOOTER //\n// ./src/PasswordReset.jsx","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Action } from './actions';\n\nconst BaseConfirm = props =>\n  React.cloneElement(props.children, {\n    error: props.error,\n    onSubmit: props.onSubmit,\n    onResend: props.onResend,\n    onCancel: props.onCancel,\n  });\n\nconst confirm = (verificationCode, user, dispatch) =>\n  new Promise((resolve, reject) => {\n    user.confirmRegistration(verificationCode, true, (error) => {\n      if (error) {\n        dispatch(Action.confirmFailed(user));\n        reject(error.message);\n      } else {\n        dispatch(Action.partialLogout());\n        resolve(user);\n      }\n    });\n  });\n\nconst resend = (user, dispatch) =>\n  new Promise((resolve, reject) => {\n    user.resendConfirmationCode((err) => {\n      if (err) {\n        dispatch(Action.confirmationRequired(user));\n        reject(err.message);\n      } else {\n        dispatch(Action.confirmationRequired(user));\n        resolve(user);\n      }\n    });\n  });\n\nconst mapStateToProps = state => ({\n  error: state.cognito.error,\n  user: state.cognito.user,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  confirmPartial: (verificationCode, user) =>\n    confirm(verificationCode, user, dispatch),\n  onCancel: () => dispatch(Action.logout()),\n  onResendPartial: user => resend(user, dispatch),\n});\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) =>\n  Object.assign({}, ownProps, stateProps, dispatchProps, {\n    onSubmit: verificationCode =>\n     dispatchProps.confirmPartial(verificationCode, stateProps.user),\n    onResend: () =>\n     dispatchProps.onResendPartial(stateProps.user),\n  });\n\n/**\n * Container for a confirmation form.  Magically adds the following props to the \n * contained form:\n *\n *  * user - the Cognito User from the redux store\n *  * error - the persisted error from the redux store\n *  * onSubmit - a handler that calls the Cognito confirm API\n *  * onResend - a handler that calls the Cognito resend request API\n *  * onCancel - Logs the user out completely\n *\n * @example\n * <Confirm>\n *   <ConfirmForm />\n * </Confirm>\n *\n */\nexport const Confirm = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n)(BaseConfirm);\n\n\n\n// WEBPACK FOOTER //\n// ./src/Confirm.jsx"],"sourceRoot":""}